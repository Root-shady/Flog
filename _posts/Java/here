1  import java.util.NoSuchElementException;
2  //Lastin-first-out(LIFO) stack of generic items.
3  
4  public class LinkedStack<T> {
5  	//inner class for encapsulation
6  	class Node<T>{
7  		T item;
8  		Node<T> next;
9  
10 		public Node(T item, Node<T> next){
11 			this.item = item;
12 			this.next = next;
13 		}
14 		//accessor methods
15 		public T getItem(){
16 			return item;
17 		}
18 		public Node<T> getNext(){
19 			return next;
20 		}
21 		//mutator
22 		public void setNext(Node<T> n){
23 			next = n;
24 		}
25 	}
26 	private Node<T> head;
27 	private int size;
28 	//constructor
29 	//construct a empty stack
30 
31 	public LinkedStack(){
32 		head = null;
33 		size = 0;
34 		assert check();
35 	}
36 	//methods
37 	public boolean isEmpty(){
38 		return head == null;
39 	}
40 	public int size(){
41 		return size;
42 	}
43 	public void push(T item){
44 		head = new Node<T>(item, head);
45 		size ++;
46 		assert check();
47 	}
48 	public T pop(){
49 		if(head == null) 
50 			throw new NoSuchElementException("Stack underflow");
51 		T result = head.getItem();
52 		head = head.getNext();
53 		size --;
54 		assert check();
55 		return result;
56 	}
57 	//peek is an operation on certain abstract data type, specifically
58 	//sequential collections such as stacks and queues, which returns 
59 	//the value of the top of the collection without removing the value 
60 	//from the data.
61 	public T peek(){
62 		if(head == null)
63 			throw new NoSuchElementException("Stack underflow");
64 		return head.getItem();
65 	}
66 	@Override
67 	public String toString(){
68 		StringBuilder s = new StringBuilder();
69 		Node<T> temp = head;
70 		while(temp != null){
71 			s.append(temp.getItem() + " ");
72 			temp = temp.getNext();
73 		}
74 		return s.toString();
75 	}
76 	//check internal invariants
77 	private boolean check(){
78 		if(size == 0){
79 			return head == null;
80 		}
81 		//check internal consistency of instance variable size
82 		int numberOfNodes = 0;
83 		for(Node<T> temp = head; temp != null; temp = temp.getNext()){
84 			numberOfNodes ++;
85 		}
86 		if(numberOfNodes != size) return false;
87 		return true;
88 	}
89 	//Unit test
90 	public static void main(String... args){
91 		LinkedStack<String> stack = new LinkedStack<String>();
92 		stack.push("!");
93 		stack.push("you");
94 		stack.push(" love ");
95 		stack.push("I");
96 		System.out.println(stack);
97 		stack.pop();
98 		System.out.println(stack);
99 		stack.peek();
100		System.out.println(stack);
101		System.out.println("The size of the stack: " + stack.size());
102	}
103}
