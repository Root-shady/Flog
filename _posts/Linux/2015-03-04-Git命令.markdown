---
layout: post
date: 2015-03-04
title: "Git命令"
comment: true
category: Linux
---
<p class="intro"><span class="dropcap">Git</span> 分布式版本控制系统(Distributed revision control system),而Github则提供共享虚拟主机服务,用于存放Git版本控制的软件代码和内容项目.Wiki的解释是web-base Git repository hosting service.也就是web版的git,能进行分布式版本控制(distributed revision control)和源码管理(source code management SCM).</p>
 <figure>
 <img src="{{ site.url  }}/assets/img/github.jpg" alt="" width="500" height="400">
<figcaption>Fig1.Github Logo. Source: GoogleImage</figcaption>
</figure>
<p style="text-indent: 50px;"> 这篇文章主要用于记录我使用git过程中用到的命令,觉得有意思的就会记录,关于git的学习有很多资料,有兴趣可以看下面的链接.事实上， 我的博客就是在github上托管的,基于Git、GitHub、Markdown与Jekyll,并绑定了自定义域名.</p>
####如何撤销工作区的文件修改

(注意,git的状态可以使用git status 查看)    
1. 撤销还没加入暂存区(staging area)的文件修改    
    
*  撤销指定文件的修改    
		git checkout -- filename.txt(注意--和文件名间的空格)    
		事实上, *--*可以省略, 不过容易和切换分支搞混,     
		git checkout branchName 所以最好还是加上*--*     
*  撤销所有工作区的修改    
	    git checkout *    
* 如何删除新添加的文件(untracked file)    
	    只有当文件比较多时,才会需要使用到下面的指令。    
   	    git clean -i    
	    -i表示 --interactive会弹出对应菜单让你选择    
	    git clean -n    
		-n表示"--dry-run"不会移除任何文件， 不过会模拟出操作结果    
		git clean -f    
		-f表示"--force"强制删除,删除当前目录所有的untraced 文件    
		git clean -df     
		-df表示--directory --force表示删除当前目录下的所有没记录的文件和文件夹

####如何删除文件和恢复文件   

1. 恢复删除的文件
注意在这里的文件状态可使用git status 查看       
* 通常在Terminal下删除文件都是直接使用rm 并且删除是不可恢复的    
   在git local repository 使用了 rm filename     
   这时修改还没有提交到staged area缓存区,所以可以使用下面的语句将文件从缓存区恢复。    
   git checkout -- filename  将staged area中的文件取回来,这和上面的撤销工作区的修改一样
   可以理解为cp指令,如果工作区存在则覆盖,不存在则创建    
* 如果直接使用git rm filename删除文件,则此时已经将删除提交到staged area
  将删除的文件提交到staged area也需要这条指令。    
  可以使用下面的指令将已经提交到statged area的删除文件恢复.    
  git reset HEAD filename
  这条命令会将文件恢复到staged area.   
  则此时使用上面的步骤,可以将文件恢复到工作区.  
  git checkout -- filename
* 如果删除文件,并已经提交了commit  
  如果除了删除文件外,没有其它的修改,则可以直接利用git的回溯功能,返回上一个commit point.      
  git reset HEAD^ --hard     
  如果期间还修改了其它文件,只想恢复删除的文件,而且保存修改的文件内容,那么可以使用下面的指令.    
  git reset HEAD^ filename   
  
####学习链接    
1. [高效利用GitHub][link1]   
2. [git 简明指南][link2]   
3. [git 教程][link3]
3. [github page][link4]
[link1]: http://www.yangzhiping.com/tech/github.html
[link2]: http://rogerdudler.github.io/git-guide/index.zh.html
[link3]: http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
[link4]: https://pages.github.com
